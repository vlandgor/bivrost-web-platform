@model SessionViewModel

@{
    ViewData["Title"] = "Session";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="session-page">
    <div class="players-panel">
        <div class="select-segment">
            <button id="studentsBtn" class="segment-button active-underline">Students</button>
            <button id="instructorsBtn" class="segment-button">Instructors</button>
            <div style="flex: 1"></div>
            <button id="addParticipantBtn" class="active-colored-button">ADD STUDENT</button>
        </div>
        <table id="StudentsSessionTable" class="tableList">
            <thead>
            <tr>
                <th class="empty-th"></th>
                <th class="left-element">NAME</th>
                <th class="center-element regular-cell">STATUS</th>
                <th class="center-element regular-cell">TIME</th>
                <th class="center-element regular-cell">PROGRESS</th>
                <th class="center-element regular-cell">OPTIONS</th>
                <th class="empty-th"></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var student in Model.Students)
            {   
                string studentStatusClass = student.st_status ? "player-status-connected" : "player-status-disconnected";
                
                <tr>
                    <td class="empty-td"></td>
                    <td class="left-element">@student.st_name</td>
                    <td class="center-element regular-cell @studentStatusClass">@(student.st_status ? "CONNECTED" : "DISCONNECTED")</td>
                    <td class="center-element regular-cell">"21 minutes</td>
                    <td class="center-element regular-cell">@student.st_progress</td>
                    <td class="center-element regular-cell">
                        <a id="sessionLink" asp-action="" asp-controller="">
                            <div class="actions-button">
                                MORE
                            </div>
                        </a>
                    </td>
                    <td class="empty-td"></td>
                </tr>
            }
            </tbody>
        </table>
        <table id="InstructorsSessionTable" style="display: none">
            
        </table>
    </div>
    
    <div class="control-panel">
        <div class="control-section info-section">
            <div class="session-name">@Model.SessionName</div>
            <div class="session-id">@Model.SessionId</div>
        </div>
        <div class="control-section action-section">
            <div class="section-description">Message to selected players</div>
            <textarea class="send-message-textarea"></textarea>
            <div class="button-container">
                <button class="action-button">Send</button>
            </div>
        </div>
        <div class="control-section action-section">
            <div class="section-description">Select action</div>
            <div class="button-container">
                <button class="action-button">Action</button>
            </div>
        </div>
        <div class="control-section action-section" style="flex: 1">
            
        </div>
        <div class="control-section action-section">
            <div class="button-container">
                <button class="finish-session-button">Finish session</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.2/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/keepAliveHub")
            .build();

        const timers = {};

        function startTimer(clientId) {
            const startTime = Date.now();
            timers[clientId] = setInterval(() => {
                const elapsedTime = Date.now() - startTime;
                const seconds = Math.floor((elapsedTime / 1000) % 60);
                const minutes = Math.floor((elapsedTime / (1000 * 60)) % 60);
                const hours = Math.floor((elapsedTime / (1000 * 60 * 60)) % 24);

                const formattedTime = [hours, minutes, seconds].map(unit => unit < 10 ? `0${unit}` : unit).join(':');
                const row = document.getElementById(clientId);
                if (row && row.cells.length > 2) {
                    row.cells[2].innerHTML = formattedTime;
                }
            }, 1000);
        }

        function stopTimer(clientId) {
            clearInterval(timers[clientId]);
            delete timers[clientId];
        }

        connection.on("ClientConnected", function (clientId, message) {
            const table = document.getElementById("StudentsSessionTable").getElementsByTagName('tbody')[0];
            const row = table.insertRow();
            row.setAttribute("id", clientId);
            row.insertCell(0).innerHTML = message;
            row.insertCell(1).innerHTML = "Connected";
            row.insertCell(2).innerHTML = "00:00:00";

            startTimer(clientId);
        });

        connection.on("UpdateKeepAlive", function (clientId, message) {
            const row = document.getElementById(clientId);
            if (row) {
                row.cells[1].innerHTML = message;
                if (message === "Connected") {
                    startTimer(clientId);
                } else {
                    stopTimer(clientId);
                }
            }
        });

        connection.on("ClientDisconnected", function (clientId) {
            const row = document.getElementById(clientId);
            if (row) {
                row.cells[1].innerHTML = "Disconnected";
                stopTimer(clientId);
            }
        });

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });
    </script>
}