@model BivrostWeb.Models.ViewModels.SessionViewModel

@{
    ViewData["Title"] = "Session";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="session-page">
    <div class="project-menu-panel">
        <a class="back-button" asp-controller="Project" asp-action="Project" asp-route-projectId="@Model.Project.Id">
            <span class="material-symbols-outlined">arrow_back</span>
        </a>
        <div class="project-full-name">
            <span class="project-menu-text">
                <a asp-controller="Project" asp-action="Project" asp-route-projectId="@Model.Project.Id">@Model.Project.Name</a>
                |
                <span class="current-location">@Model.Session.s_name</span>
            </span>
        </div>
        <a asp-controller="Project" asp-action="Project" asp-route-projectId="@Model.Project.Id" class="project-menu-button active-menu-button">PROJECT</a>
        <a class="project-menu-button">ANALYTICS</a>
        <a asp-controller="Project" asp-action="Settings" asp-route-projectId="@Model.Project.Id" class="project-menu-button">SETTINGS</a>
    </div>
    
    <div class="block" id="div1">
        <div class="block-top">
            <div class="block-name">Progress</div>
            <div style="flex-grow: 1;"></div>
            <button class="block-option-button" onclick="makeFullscreen('div1')"><i class="bi bi-fullscreen"></i></button>
            <button class="block-option-button"><i class="bi bi-arrow-clockwise"></i></button>
        </div>
        <div class="project-menu-panel">
            <button class="project-menu-button active-menu-button" data-table="studentsTable" onclick="toggleTable(event)">Students</button>
            <button class="project-menu-button" data-table="instructorsTable" onclick="toggleTable(event)">Instructors</button>
            <div style="flex-grow: 1;"></div>
            <button id="createModalButton" class="create-button">ADD STUDENT</button>
        </div>
        <table id="studentsTable">
            <thead>
                <tr>
                    <th class="left-element">NAME</th>
                    <th class="centered-table-element regular-column">STATUS</th>
                    <th class="centered-table-element regular-column">TIME</th>
                    <th class="centered-table-element regular-column">PROGRESS</th>
                    <th class="centered-table-element regular-column">OPTIONS</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Student student in Model.Session.s_students)
                {
                    <tr data-student-id="@student.st_id">
                        <td class="left-element">@student.st_name</td>
                        <td class="centered-table-element regular-column">@student.st_status</td>
                        <td class="centered-table-element regular-column">26 minutes</td>
                        <td class="centered-table-element regular-column">@student.st_progress</td>
                        <td class="centered-table-element regular-column">
                            <a asp-action="Student" asp-controller="Project" asp-route-projectId="@Model.Project.Id" asp-route-sessionId="@Model.Session.s_id" asp-route-studentId="@student.st_id">
                                <button class="table-more-option">More</button>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <table id="instructors" style="display: none;">
            @* ... your instructor table code ... *@
        </table>
    </div>
</div>

<div class="modal fade" id="createModalPanel" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content modalPanel">
            <div class="modalHeader">
                <label class="modalTitle" id="modalTitle">Add a new student</label>
                <label class="modalTitleDescription" id="modalTitleDescription">Add a new student to the session</label>
            </div>
            @{
                string randomStudentID = Guid.NewGuid().ToString();
            }
            <form asp-controller="Project" asp-action="AddStudent" method="post" 
                  asp-route-projectId="@Model.Project.Id" 
                  asp-route-sessionId="@Model.Session.s_id"
                  asp-route-studentId="@randomStudentID">
                <div class="modalBody">
                    <div class="modalBodyContentBlock">
                        <label>Student ID</label>
                        <input type="text" value="@randomStudentID" id="studentIdInput" class="form-control" readonly="readonly"/>
                    </div>
                    <div class="modalBodyContentBlock">
                        <label>Student Name</label>
                        <input type="text" id="studentNameInput" name="studentName" class="form-control"/>
                    </div>
                </div>
                <div class="modalFooter">
                    <div type="button" id="cancelButton" class="footerButton cancelButton" data-dismiss="modal">CANCEL</div>
                    <button type="submit" id="createNewStudent" class="footerButton continueButton">CREATE</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        @Html.Raw("<script src='https://cdn.jsdelivr.net/npm/@microsoft/signalr@6.0.0/dist/browser/signalr.min.js'></script>")
        document.addEventListener('DOMContentLoaded', function() {
            const sessionId = '@Model.Session.s_id'; // Use your session ID from the model
    
            fetch(`/api/session/students/${sessionId}`)
                .then(response => response.json())
                .then(students => {
                    students.forEach(student => {
                        createStudentRow(student.studentLocked, student.studentId, student.studentName, student.studentStatus, student.studentProgress);
                    });
                })
                .catch(err => {
                    console.error('Error fetching students:', err);
                });
        });
    
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/sessionhub")
            .build();
    
        // Method to create a new student row in the table
        function createStudentRow(locked, studentId, studentName, studentStatus, studentProgress) {
            const studentsTable = document.getElementById("studentsTable").getElementsByTagName('tbody')[0];
            
            // Create a new row
            const row = document.createElement("tr");
            row.setAttribute('data-student-id', studentId);
            
            const idLocked = document.createElement("td");
            idLocked.textContent = locked;
            row.appendChild(idLocked);
            
            const nameCell = document.createElement("td");
            nameCell.textContent = studentName;
            row.appendChild(nameCell);
        
            const statusCell = document.createElement("td");
            statusCell.textContent = studentStatus;
            row.appendChild(statusCell);
        
            const progressCell = document.createElement("td");
            progressCell.textContent = studentProgress;
            row.appendChild(progressCell);
        
            // Append the row to the table
            studentsTable.appendChild(row);
        }
    
        // SignalR connection event handlers (for dynamic updates)
        connection.on("CreateStudent", function(studentId, locked, studentName, studentStatus, studentProgress) {
            createStudentRow(locked, studentId, studentName, studentStatus, studentProgress);
        });
    
        connection.on("LockStudent", function(studentId) {
            const existingRow = document.querySelector(`#studentsTable tbody tr[data-student-id="${studentId}"]`);
            
            if (existingRow) {
                existingRow.cells[0].textContent = true;
            }
        });
    
        connection.on("UpdateStudentProgress", function(studentId, studentProgress) {
            const existingRow = document.querySelector(`#studentsTable tbody tr[data-student-id="${studentId}"]`);
            
            if (existingRow) {
                existingRow.cells[3].textContent = studentProgress;
            }
        });
    
        connection.start().catch(err => console.error(err.toString()));
    </script>
}